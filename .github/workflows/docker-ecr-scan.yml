name: Build, Scan, and Deploy Docker Image to ECR

on:
  push:
    branches: [main]

permissions:
  id-token: write   # Required for OIDC token
  contents: read    # Required by actions/checkout

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::334645279807:role/github.to.aws.oicd
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .

      - name: Tag and Push image to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Update image tag in deployment.yaml
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          IMAGE_TAG=${{ github.sha }}
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          yq e '.spec.template.spec.containers[0].image = "'${REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}'"' -i k8s/deployment.yaml
          git config --global user.email "ci-bot@example.com"
          git config --global user.name "ci-bot"
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git
          git add k8s/deployment.yaml
          git commit -m "Update image tag to ${IMAGE_TAG} [ci skip]"
          git push origin main

      - name: Start ECR image scan
        run: |
          IMAGE_TAG=${{ github.sha }}
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --image-id imageTag=$IMAGE_TAG

      - name: Wait for ECR scan to complete
        run: |
          IMAGE_TAG=${{ github.sha }}
          for i in {1..12}; do
            echo "[DEBUG] Waiting for scan to complete... ($i/12)"
            STATUS=$(aws ecr describe-image-scan-findings \
              --repository-name ${{ secrets.ECR_REPOSITORY }} \
              --image-id imageTag=$IMAGE_TAG \
              --query 'imageScanStatus.status' \
              --output text 2>/dev/null || echo "IN_PROGRESS")
            if [ "$STATUS" == "COMPLETE" ]; then
              echo "[DEBUG] Scan complete."
              break
            fi
            sleep 5
          done

      - name: Check ECR scan findings
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "[DEBUG] Checking scan findings for image tag: $IMAGE_TAG"

          HIGH_COUNT=$(aws ecr describe-image-scan-findings \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --image-id imageTag=$IMAGE_TAG \
            --query 'length(imageScanFindings.findings[?severity==`HIGH`])' \
            --output text 2>/dev/null || echo 0)

          CRITICAL_COUNT=$(aws ecr describe-image-scan-findings \
            --repository-name ${{ secrets.ECR_REPOSITORY }} \
            --image-id imageTag=$IMAGE_TAG \
            --query 'length(imageScanFindings.findings[?severity==`CRITICAL`])' \
            --output text 2>/dev/null || echo 0)

          echo "[DEBUG] Found: $HIGH_COUNT HIGH and $CRITICAL_COUNT CRITICAL vulnerabilities"

          if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo ":x: High or Critical vulnerabilities found!"
            exit 1
          fi
          echo ":white_check_mark: No high or critical vulnerabilities found."
